{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "Hypermedia19 API",
    "description" : "API for access MongoDB data for hypermedia project",
    "contact" : {
      "email" : "marco3.selva@mail.polimi.it"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version" : "1.0.0"
  },
  "servers" : [ {
    "url" : "https://virtserver.swaggerhub.com/narcos9612/Hypermedia2019Festival/1.0.0",
    "description" : "SwaggerHub API Auto Mocking"
  }, {
    "url" : "https://hypermedia19.herokuapp.com",
    "description" : "API use in project of hypermedia 19 in Politecnico di Milano. Gruop Selva, Tresoldi, Zani"
  } ],
  "security" : [ {
    "bearerAuth" : [ ]
  } ],
  "tags" : [ {
    "name" : "authenticatedUsers",
    "description" : "Secured Admin-only calls"
  }, {
    "name" : "user",
    "description" : "Operations available to regular user"
  } ],
  "paths" : {
    "/artist" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "get all artist",
        "description" : "You can get all available artist in the system\n",
        "operationId" : "getArtists",
        "responses" : {
          "200" : {
            "description" : "all artist in the DB",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ArtistItem"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input body"
          }
        }
      },
      "post" : {
        "tags" : [ "authenticatedUsers" ],
        "summary" : "adds an artist item",
        "description" : "Adds an item to the system",
        "operationId" : "addArtist",
        "requestBody" : {
          "description" : "As wite in D1 delivery, documentation about for can be found at http://hypermedia19.herokuapp.com/backend/post",
          "content" : {
            "application/json" : {
              "example" : {
                "name" : "EMMA MARRONE",
                "currentAffiliattion" : "Universal Music Group",
                "achivements" : "Amici 2010",
                "type" : "singer",
                "IsCompany" : false,
                "abstract" : "Emma Marrone (born May 25, 1984 in Florence) is an Italian singer and record producer. After some musical experiences with different groups, she rose to prominence as a solo singer between 2009 and 2010, winning the ninth talent show Amici di Maria De Filippi and signing a contract with the Universal Music Group."
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "item created"
          },
          "400" : {
            "description" : "invalid input, object invalid"
          },
          "401" : {
            "description" : "authFailed"
          },
          "409" : {
            "description" : "an existing item already exists"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/seminar" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "get all Seminar",
        "description" : "You can get all available seminar in the system\n",
        "operationId" : "getSeminar",
        "responses" : {
          "200" : {
            "description" : "all seminar in the DB",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SeminarItem"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input body"
          }
        }
      },
      "post" : {
        "tags" : [ "authenticatedUsers" ],
        "summary" : "adds an seminar item",
        "description" : "Adds an seminar to the system",
        "operationId" : "addSeminar",
        "requestBody" : {
          "description" : "As wite in D1 delivery, documentation about for can be found at http://hypermedia19.herokuapp.com/backend/post",
          "content" : {
            "application/json" : {
              "example" : {
                "name" : "HOW BORN MUSICAL?",
                "date" : "14/06/2020 - 17.00",
                "place" : "Pavilion 3",
                "abstract" : "Form experencies of Totem and Notredam creator s we will travel in a musical creation and rappresentaion, from start ideas to the final event."
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "item created"
          },
          "400" : {
            "description" : "invalid input, object invalid"
          },
          "401" : {
            "description" : "authFailed"
          },
          "409" : {
            "description" : "an existing item already exists"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/event" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "get all Events",
        "description" : "You can get all available seminar in the system\n",
        "operationId" : "getEvents",
        "responses" : {
          "200" : {
            "description" : "all events in the DB",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventItem"
                }
              }
            }
          },
          "500" : {
            "description" : "internal error"
          }
        }
      },
      "post" : {
        "tags" : [ "authenticatedUsers" ],
        "summary" : "adds an event item",
        "description" : "Adds an event to the system",
        "operationId" : "addEent",
        "requestBody" : {
          "description" : "As wite in D1 delivery, documentation about for can be found at http://hypermedia19.herokuapp.com/backend/post",
          "content" : {
            "application/json" : {
              "example" : {
                "artistId" : "5e1601e9dfcc821a14f20f2c",
                "name" : "IL VOLO ON OPERA",
                "date" : "14/06/2020 - 21.00",
                "place" : "Pavilion 2",
                "price" : "35",
                "abstract" : "This opera show will keep you company for two hours of pure magic. With their majestic voices, Il Volo will be able to close our Festival perfectly.",
                "isSoldOut" : "false",
                "type" : "opera"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "item created"
          },
          "400" : {
            "description" : "invalid input, object invalid"
          },
          "401" : {
            "description" : "unauthorized"
          },
          "404" : {
            "description" : "artist Id not found"
          },
          "409" : {
            "description" : "an existing item already exists"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/artist/{id}" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "searches artist with id passed in params",
        "description" : "You can get all available artist in the system\n",
        "operationId" : "searchArtistById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of artist to fetch",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "all artist in the DB with id passed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ArtistItem"
                }
              }
            }
          },
          "404" : {
            "description" : "artistid not found"
          },
          "500" : {
            "description" : "internal error"
          }
        }
      },
      "delete" : {
        "tags" : [ "authenticatedUsers" ],
        "summary" : "delete  artist with id passed in params",
        "description" : "You can delete  artist with id passed in params\n",
        "operationId" : "deleteArtistById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of artist to delete",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "delete artist in the DB with id passed"
          },
          "401" : {
            "description" : "unauthorized"
          },
          "500" : {
            "description" : "Cast error, not valid ObjectId"
          }
        }
      }
    },
    "/seminar/{id}" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "searches seminar with id passed in params",
        "description" : "You can get all available seminar in the system\n",
        "operationId" : "searchSeminarById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of seminar to fetch",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "all seminar in the DB with id passed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SeminarItem"
                }
              }
            }
          },
          "404" : {
            "description" : "seminar not found"
          },
          "500" : {
            "description" : "internal error"
          }
        }
      },
      "delete" : {
        "tags" : [ "authenticatedUsers" ],
        "summary" : "delete  seminar with id passed in params",
        "description" : "You can delete  seminar with id passed in params\n",
        "operationId" : "deleteSeminarById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of seminar to delete",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "delete seminar in the DB with id passed"
          },
          "401" : {
            "description" : "unauthorized"
          },
          "500" : {
            "description" : "Cast error, not valid ObjectId"
          }
        }
      }
    },
    "/event/{id}" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "searches event with id passed in params",
        "description" : "You can get all available event in the system\n",
        "operationId" : "searchEventById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of event to fetch",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "all event in the DB with id passed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventItem"
                }
              }
            }
          },
          "404" : {
            "description" : "eventId not found"
          },
          "500" : {
            "description" : "internal error"
          }
        }
      },
      "delete" : {
        "tags" : [ "authenticatedUsers" ],
        "summary" : "delete  event with id passed in params",
        "description" : "You can delete  artist with id passed in params\n",
        "operationId" : "deleteEventById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of event to delete",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "delete event in the DB with id passed"
          },
          "401" : {
            "description" : "unauthorized"
          },
          "500" : {
            "description" : "Cast error, not valid ObjectId"
          }
        }
      }
    },
    "/order/single/{userId}" : {
      "get" : {
        "tags" : [ "authenticatedUsers" ],
        "summary" : "get Cart (order) of the user passed by Id",
        "description" : "You can get the  Cart (order) of the user passed by Id\n",
        "operationId" : "getSingleByUserId",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "ID of user order",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the  of the user passed by Id",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SingleOrderItem"
                }
              }
            }
          },
          "404" : {
            "description" : "single order not found"
          },
          "500" : {
            "description" : "internal error"
          }
        }
      }
    },
    "/order/{userId}/{eventId}" : {
      "get" : {
        "tags" : [ "authenticatedUsers" ],
        "summary" : "get Cart (order) of the user passed by Id",
        "description" : "You can get the  Cart (order) of the user passed by Id\n",
        "operationId" : "getCattBySserId",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "ID of user order",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "eventId",
          "in" : "path",
          "description" : "ID of event order",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "returnt the Single Order of the event and user passed by Id"
          },
          "404" : {
            "description" : "not found"
          },
          "500" : {
            "description" : "internal error"
          }
        }
      }
    },
    "/order/{userId}" : {
      "get" : {
        "tags" : [ "authenticatedUsers" ],
        "summary" : "get Cart (order) of the user passed by Id",
        "description" : "You can get the  Cart (order) of the user passed by Id\n",
        "operationId" : "getCartByUserId",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "ID of user order",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the  of the user passed by Id",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrdersItem"
                }
              }
            }
          },
          "404" : {
            "description" : "eventId not found"
          },
          "500" : {
            "description" : "internal error"
          }
        }
      },
      "post" : {
        "tags" : [ "authenticatedUsers" ],
        "summary" : "post single order of the user passed by Id",
        "description" : "posting single order (new or update) and save in userId cart\n",
        "operationId" : "postOrderByUserId",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "ID of user order",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SingleOrderItem"
              },
              "example" : {
                "eventId" : "d290f1ee-6c54-4b01-90e6-d701748f0851",
                "price" : 50,
                "quantity" : 2
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "succes of update or create single order",
            "content" : {
              "application/json" : {
                "example" : {
                  "message" : "order created"
                }
              }
            }
          },
          "404" : {
            "description" : "eventId not found"
          },
          "500" : {
            "description" : "internal error"
          }
        }
      },
      "delete" : {
        "tags" : [ "authenticatedUsers" ],
        "summary" : "delete  order of userId passed in params",
        "description" : "You can delete  artist with id passed in params\n",
        "operationId" : "deleteCartById",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "ID of userId that want to delete cart",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "delete event in the DB with id passed",
            "content" : {
              "application/json" : {
                "example" : {
                  "message" : "Order deleted",
                  "request" : {
                    "type" : "POST",
                    "url" : "https://hypermedia19.herokuapp.com/order/"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized"
          },
          "500" : {
            "description" : "Cast error, not valid ObjectId"
          }
        }
      }
    },
    "/user/signup/" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "register user in or DB, create order associate of this user",
        "description" : "register user in or DB, create order associate of this user \n",
        "operationId" : "register",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RegisterItem"
              },
              "example" : {
                "name" : "marco",
                "surname" : "selva",
                "email" : "marco@polimi.it",
                "password" : "milano19"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "user creted"
          },
          "404" : {
            "description" : "eventId not found"
          },
          "409" : {
            "description" : "Mail exists"
          },
          "500" : {
            "description" : "internal error"
          }
        }
      }
    },
    "/user/login/" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "login user",
        "description" : "login user\n",
        "operationId" : "login",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LogItem"
              },
              "example" : {
                "email" : "marco@polimi.it",
                "password" : "milano19"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "auth successful"
          },
          "401" : {
            "description" : "auth failde"
          },
          "500" : {
            "description" : "internal error"
          }
        }
      }
    },
    "/user/{userId}" : {
      "delete" : {
        "tags" : [ "authenticatedUsers" ],
        "summary" : "delete  user of userId passed in params",
        "description" : "You can delete  user with id passed in params\n",
        "operationId" : "deleteuserById",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "ID of userId that want to delete",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "delete user in the DB with id passed",
            "content" : {
              "application/json" : {
                "example" : {
                  "message" : "User deleted"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized"
          },
          "500" : {
            "description" : "Cast error, not valid ObjectId"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "LogItem" : {
        "required" : [ "email", "password" ],
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "format" : "uuid"
          },
          "password" : {
            "type" : "string",
            "format" : "uuid"
          }
        }
      },
      "RegisterItem" : {
        "required" : [ "email", "name", "password", "surname" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "format" : "uuid"
          },
          "surname" : {
            "type" : "string",
            "format" : "uuid"
          },
          "email" : {
            "type" : "string",
            "format" : "uuid"
          },
          "password" : {
            "type" : "string",
            "format" : "uuid"
          }
        }
      },
      "SingleOrderPost" : {
        "required" : [ "eventId", "price", "quantity" ],
        "type" : "object",
        "properties" : {
          "eventId" : {
            "type" : "string",
            "format" : "uuid"
          },
          "price" : {
            "type" : "number",
            "format" : "int32",
            "example" : 50
          },
          "quantity" : {
            "type" : "number",
            "format" : "int32",
            "example" : 2
          }
        }
      },
      "ArtistItem" : {
        "required" : [ "abstract", "achivements", "companyMembers", "currentAffiliattion", "id", "isCompany", "name", "photoGallery" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "name" : {
            "type" : "string",
            "example" : "Widget Adapter"
          },
          "currentAffiliattion" : {
            "type" : "string",
            "example" : "Universal"
          },
          "achivements" : {
            "type" : "array",
            "example" : [ "Grammy 2018", "MTV Awards 2017" ],
            "items" : {
              "type" : "string"
            }
          },
          "isCompany" : {
            "type" : "boolean",
            "example" : true
          },
          "companyMemebers" : {
            "type" : "array",
            "example" : [ "Ingrosso", "Angello", "Axwell" ],
            "items" : {
              "type" : "string"
            }
          },
          "abstract" : {
            "type" : "string",
            "example" : "Born in 1993 for USA, he lived in a family.."
          },
          "photoGallery" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "SeminarItem" : {
        "required" : [ "abstract", "date", "id", "name", "photoGallery", "place" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "name" : {
            "type" : "string",
            "example" : "Widget Adapter"
          },
          "date" : {
            "type" : "string",
            "example" : "12/06/2020 15:00"
          },
          "place" : {
            "type" : "string",
            "example" : "Pavilion 1"
          },
          "abstract" : {
            "type" : "string",
            "example" : "Born in 1993 for USA, he lived in a family.."
          },
          "photoGallery" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "binary"
            }
          }
        }
      },
      "EventItem" : {
        "required" : [ "abstract", "artistId", "date", "id", "isSoldOut", "name", "photoGallery", "place", "price", "relSeminarId", "type" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "artistId" : {
            "type" : "array",
            "format" : "uuid",
            "example" : [ "5e16081ffc7847372c3f7615", "5e16081ffc7847372c3f7615" ],
            "items" : {
              "type" : "string"
            }
          },
          "name" : {
            "type" : "string",
            "example" : "Bolle and friends"
          },
          "date" : {
            "type" : "string",
            "example" : "12/06/2020 15:00"
          },
          "place" : {
            "type" : "string",
            "example" : "Pavilion 1"
          },
          "price" : {
            "type" : "number",
            "example" : 50
          },
          "type" : {
            "type" : "string",
            "example" : "concert"
          },
          "relSeminar" : {
            "type" : "array",
            "format" : "uuid",
            "example" : [ "5e16081ffc7847372c3f7615", "5e16081ffc7847372c3f7615" ],
            "items" : {
              "type" : "string"
            }
          },
          "photoGallery" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "UserItem" : {
        "required" : [ "email", "id", "name", "password", "surname" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "name" : {
            "type" : "string",
            "example" : "marco"
          },
          "surname" : {
            "type" : "string",
            "example" : "selva"
          },
          "password" : {
            "type" : "string",
            "example" : "absafi324"
          }
        }
      },
      "OrdersItem" : {
        "required" : [ "SingleOrder", "id", "totalPrice", "userId" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "userId" : {
            "type" : "string",
            "format" : "uuid"
          },
          "SingleOrder" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          },
          "totalPrice" : {
            "type" : "number",
            "example" : 50
          }
        }
      },
      "SingleOrderItem" : {
        "required" : [ "eventId", "id", "quantity", "subTotal", "userId" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "userId" : {
            "type" : "string",
            "format" : "uuid"
          },
          "eventId" : {
            "type" : "string",
            "format" : "uuid"
          },
          "quantity" : {
            "type" : "number",
            "example" : 3
          },
          "subTotal" : {
            "type" : "number",
            "example" : 50
          }
        }
      }
    },
    "responses" : {
      "UnauthorizedError" : {
        "description" : "Access token is missing or invalid"
      }
    },
    "securitySchemes" : {
      "bearerAuth" : {
        "type" : "http",
        "scheme" : "bearer",
        "bearerFormat" : "JWT"
      }
    }
  }
}